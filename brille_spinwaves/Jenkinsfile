#!groovy

def get_os(String jobname) {
  if (jobname.contains('Scientific-Linux-7')) {
    return 'Scientific-Linux-7'
  } else if (jobname.contains('Windows-10')) {
    return 'Windows-10'
  } else {
    return ''
  }
}

def get_matlab_ver(String jobname) {
  return jobname[-5..-1]
}

def get_agent(String jobname) {
  if (jobname.contains('Scientific-Linux-7')) {
    withCredentials([string(credentialsId: 'sl7_agent', variable: 'agent')]) {
      return "${agent}"
    }
  } else if (jobname.contains('Windows-10')) {
    withCredentials([string(credentialsId: 'win10_agent', variable: 'agent')]) {
      return "${agent}"
    }
  } else {
    return ''
  }
}

pipeline {

  agent {
    label get_agent(env.JOB_BASE_NAME)
  }

  environment {
    MATLAB_VERSION = get_matlab_ver(env.JOB_BASE_NAME)
    CONDA_ENV_NAME = "py36_brille_integration_${env.MATLAB_VERSION}"
  }

  triggers {
    cron('H 2 * * 2')
  }

  stages {
    stage("Get-PACE-jenkins-shared-library") {
      steps {
        dir('PACE-jenkins-shared-library') {
          checkout([
            $class: 'GitSCM', 
            branches: [[name: "refs/heads/main"]],
            extensions: [[$class: 'WipeWorkspace']],
            userRemoteConfigs: [[url: 'https://github.com/pace-neutrons/PACE-jenkins-shared-library.git']]
          ])
        }
      }
    }

    stage("Get-Horace") {
      steps {
        script {
          copyArtifacts(
            filter: 'build/Horace-*',
            fingerprintArtifacts: true,
            projectName: "PACE-neutrons/Horace/" + get_os(env.JOB_BASE_NAME) + "-${env.MATLAB_VERSION}",
            selector: lastSuccessful()
          )
          if (isUnix()) {
            sh '''
              archive_name="\$(find -name Horace-*.tar.gz)"
              mkdir Horace && tar --strip-components=1 -xf \$archive_name -C Horace
            '''
          }
          else {
            powershell './powershell_scripts/extract_horace_artifact.ps1'
          }

        }
      }
    }

    stage("Get-SpinW") {
      steps {
        dir('spinw') {
          checkout([
            $class: 'GitSCM',
            branches: [[name: "refs/heads/brille_integration"]],
            extensions: [[$class: 'WipeWorkspace']],
            userRemoteConfigs: [[url: 'https://github.com/mducle/spinw']]
          ])
        }
      }
    }

    stage("Get-Brille") {
      steps {
        script {
          if (isUnix()) {
            sh '''
              module load conda/3 &&
              conda create --name \$CONDA_ENV_NAME python=3.6 -y &&
              conda activate \$CONDA_ENV_NAME &&
              python -m pip install brille numpy requests
            '''
          }
          else {
            powershell './PACE-jenkins-shared-library/powershell_scripts/create_conda_environment.ps1'
            bat """
              CALL "%VS2019_VCVARSALL%" x86_amd64
              CALL conda activate %CONDA_ENV_NAME%
              python -m pip install brille numpy requests
            """
            }
          }
      }
    }

    stage("Set-Up-Matlab-And-Run-Tests") {
      steps {
        script {
          if (isUnix()) {
            sh '''
              module load conda/3 &&
              conda activate \$CONDA_ENV_NAME &&
              export PYTHON_EX_PATH=`which python` &&
              module load matlab/R\$MATLAB_VERSION &&
              matlab -nosplash -nodesktop -batch "run('brille_spinwaves/run_spinw_brille_test.m')"
            '''
          }
          else {
            powershell './PACE-jenkins-shared-library/powershell_scripts/execute_matlab_command.ps1 "run(\'brille_spinwaves/run_spinw_brille_test.m\')"'
          }
        }
      }
    }
  }

  post {
    unsuccessful {
      withCredentials([string(credentialsId: 'SpinW_contact_email', variable: 'spinw_email'),
                       string(credentialsId: 'Horace_contact_email', variable: 'horace_email')]){
        script {
            mail (
              to: "${spinw_email},${horace_email}",
              subject: "PACE integration pipeline failed: ${env.JOB_BASE_NAME}",
              body: "See ${env.BUILD_URL}"
            )
        }
      }
    }

    cleanup {
      deleteDir()
    }

  }
}
